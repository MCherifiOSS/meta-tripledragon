diff -Xxfiles -rNBwdu linux-2.6.12.orig/arch/ppc/kernel/dma-mapping.c linux-2.6.12/arch/ppc/kernel/dma-mapping.c
--- linux-2.6.12.orig/arch/ppc/kernel/dma-mapping.c	2005-06-17 21:48:29.000000000 +0200
+++ linux-2.6.12/arch/ppc/kernel/dma-mapping.c	2005-06-24 21:58:23.000000000 +0200
@@ -367,8 +367,7 @@
 /*
  * make an area consistent.
  */
-void __dma_sync(void *vaddr, size_t size, int direction)
-{
+void __dma_sync(void *vaddr, size_t size, int direction) {
 	unsigned long start = (unsigned long)vaddr;
 	unsigned long end   = start + size;

@@ -375,9 +374,27 @@
 	switch (direction) {
 	case DMA_NONE:
 		BUG();
+
 	case DMA_FROM_DEVICE:	/* invalidate only */
+#if defined(CONFIG_40x)
+			/* Handle cases where the buffer start and/or end
+			 * are not L1 cache line aligned.
+			 * Some drivers/subsystems (e.g. USB, SCSI) do DMA
+			 * from stack allocated buffers. To prevent
+			 * corruption of other stack variables located
+			 * near the buffer, we flush (instead of invalidate)
+			 * these "dangerous" areas.
+			 * patch from Eugene Surovegin <ebs@ebshome.net>
+			 */
+			if( unlikely(start & (L1_CACHE_LINE_SIZE - 1)) )
+				__asm__ __volatile__("dcbf 0,%0" : : "r" (start));
+
+			if( unlikely(end & (L1_CACHE_LINE_SIZE - 1)) )
+				__asm__ __volatile__("dcbf 0,%0" : : "r" (end));
+#endif
 		invalidate_dcache_range(start, end);
 		break;
+
 	case DMA_TO_DEVICE:		/* writeback only */
 		clean_dcache_range(start, end);
 		break;
diff -Xxfiles -rNBwdu linux-2.6.12.orig/arch/ppc/syslib/Makefile linux-2.6.12/arch/ppc/syslib/Makefile
--- linux-2.6.12.orig/arch/ppc/syslib/Makefile	2005-06-17 21:48:29.000000000 +0200
+++ linux-2.6.12/arch/ppc/syslib/Makefile	2005-06-25 17:25:29.000000000 +0200
@@ -29,6 +29,7 @@
 obj-$(CONFIG_GEN_RTC)		+= todc_time.o
 obj-$(CONFIG_PPC4xx_DMA)	+= ppc4xx_dma.o
 obj-$(CONFIG_PPC4xx_EDMA)	+= ppc4xx_sgdma.o
+obj-$(CONFIG_STBXXX_DMA)	+= ppc4xx_stbdma.o
 ifeq ($(CONFIG_40x),y)
 obj-$(CONFIG_PCI)		+= indirect_pci.o pci_auto.o ppc405_pci.o
 endif
diff -Xxfiles -rNBwdu linux-2.6.12.orig/arch/ppc/syslib/ppc4xx_dma.c linux-2.6.12/arch/ppc/syslib/ppc4xx_dma.c
--- linux-2.6.12.orig/arch/ppc/syslib/ppc4xx_dma.c	2005-06-17 21:48:29.000000000 +0200
+++ linux-2.6.12/arch/ppc/syslib/ppc4xx_dma.c	2005-06-25 21:37:58.000000000 +0200
@@ -606,20 +606,26 @@
 	return (GET_DMA_PW(control));
 }

-/*
- * Clears the channel status bits
- */
-int
-ppc4xx_clr_dma_status(unsigned int dmanr)
-{
+
+
+int ppc4xx_clr_dma_status(unsigned int dmanr) {
 	if (dmanr >= MAX_PPC4xx_DMA_CHANNELS) {
 		printk(KERN_ERR "ppc4xx_clr_dma_status: bad channel: %d\n", dmanr);
-		return DMA_STATUS_BAD_CHANNEL;
+		return(DMA_STATUS_BAD_CHANNEL);
 	}
 	mtdcr(DCRN_DMASR, ((u32)DMA_CH0_ERR | (u32)DMA_CS0 | (u32)DMA_TS0) >> dmanr);
-	return DMA_STATUS_GOOD;
+	return(DMA_STATUS_GOOD);
 }

+
+//--------------------------------------------------------------------------
+// our DMAs do not have a burstenable-bit here
+//--------------------------------------------------------------------------
+#if !defined(CONFIG_STBXXX_DMA)
+/*
+ * Clears the channel status bits
+ */
+
 /*
  * Enables the burst on the channel (BTEN bit in the control/count register)
  * Note:
@@ -685,6 +691,13 @@
 	return DMA_STATUS_GOOD;
 }

+EXPORT_SYMBOL(ppc4xx_enable_burst);
+EXPORT_SYMBOL(ppc4xx_disable_burst);
+EXPORT_SYMBOL(ppc4xx_set_burst_size);
+
+#endif	// CONFIG_STBXXX_DMA
+
+
 EXPORT_SYMBOL(ppc4xx_init_dma_channel);
 EXPORT_SYMBOL(ppc4xx_get_channel_config);
 EXPORT_SYMBOL(ppc4xx_set_channel_priority);
@@ -703,6 +716,3 @@
 EXPORT_SYMBOL(ppc4xx_disable_dma_interrupt);
 EXPORT_SYMBOL(ppc4xx_get_dma_status);
 EXPORT_SYMBOL(ppc4xx_clr_dma_status);
-EXPORT_SYMBOL(ppc4xx_enable_burst);
-EXPORT_SYMBOL(ppc4xx_disable_burst);
-EXPORT_SYMBOL(ppc4xx_set_burst_size);
diff -Xxfiles -rNBwdu linux-2.6.12.orig/arch/ppc/syslib/ppc4xx_pm.c linux-2.6.12/arch/ppc/syslib/ppc4xx_pm.c
--- linux-2.6.12.orig/arch/ppc/syslib/ppc4xx_pm.c	2005-06-17 21:48:29.000000000 +0200
+++ linux-2.6.12/arch/ppc/syslib/ppc4xx_pm.c	2005-06-25 23:35:01.000000000 +0200
@@ -32,7 +32,7 @@

 #if !defined(CONFIG_PPC405_I2C_ADAP)
 	value |= CPM_IIC0;
-#ifdef CONFIG_STB03xxx
+#if defined(CONFIG_STB03xxx) || defined(CONFIG_TRIPLEDRAGON)
 	value |= CPM_IIC1;
 #endif
 #endif
diff -Xxfiles -rNBwdu linux-2.6.12.orig/arch/ppc/syslib/ppc4xx_stbdma.c linux-2.6.12/arch/ppc/syslib/ppc4xx_stbdma.c
--- linux-2.6.12.orig/arch/ppc/syslib/ppc4xx_stbdma.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.12/arch/ppc/syslib/ppc4xx_stbdma.c	2004-10-11 18:14:05.000000000 +0200
@@ -0,0 +1,123 @@
+/*
+ * arch/ppc/syslib/ppc4xx_stbdma.c
+ *
+ * BRIEF MODULE DESCRIPTION
+ *	IBM PPC4xx STBxxxx DMA Controller Functions
+ *
+ * Copyright 2002 MontaVista Software Inc.
+ * Author: MontaVista Software, Inc.
+ *         Armin Kuster <akuster@mvista.com>
+ *
+ * Based on ppc4xx_dma.c by
+ *         ppopov@mvista.com or source@mvista.
+ *
+ *  This program is free software; you can redistribute  it and/or modify it
+ *  under  the terms of  the GNU General  Public License as published by the
+ *  Free Software Foundation;  either version 2 of the  License, or (at your
+ *  option) any later version.
+ *
+ *  You should have received a copy of the  GNU General Public License along
+ *  with this program; if not, write  to the Free Software Foundation, Inc.,
+ *  675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+#include <linux/config.h>
+#include <linux/kernel.h>
+#include <asm/system.h>
+#include <asm/io.h>
+#include <linux/mm.h>
+#include <linux/miscdevice.h>
+#include <linux/init.h>
+#include <linux/module.h>
+
+#include <asm/ppc4xx_dma.h>
+
+int clr_dma_status(unsigned int dmanr) {
+	unsigned int control;
+	ppc_dma_ch_t *p_dma_ch = &dma_channels[dmanr];
+
+	p_dma_ch->int_enable = 1;
+
+	control = mfdcr(DCRN_DMASR);
+	switch (dmanr) {
+	case 0:
+		control |= DMA_CS0 & DMA_CH0_ERR & DMA_CT0;
+		break;
+	case 1:
+		control |= DMA_CS1 & DMA_CH1_ERR & DMA_CT1;
+		break;
+	case 2:
+		control |= DMA_CS2 & DMA_CH2_ERR & DMA_CT2;
+		break;
+	case 3:
+		control |= DMA_CS3 & DMA_CH3_ERR & DMA_CT3;
+		break;
+	default:
+#ifdef DEBUG_4xxDMA
+		printk("clr_dma_status: bad channel: %d\n", dmanr);
+#endif
+		return DMA_STATUS_BAD_CHANNEL;
+	}
+	mtdcr(DCRN_DMASR, control);
+	return DMA_STATUS_GOOD;
+}
+
+/*
+ * Maps a given port to a one of the dma
+ * channels
+ */
+int map_dma_port(unsigned int dmanr, unsigned int ocp_dma,short dma_chan) {
+	unsigned int map;
+	int connect_port_to_chan, select;
+
+	connect_port_to_chan = ((ocp_dma & 0x7)*4);
+
+	select = ocp_dma >> 3;
+	switch (select) {
+	case 0:
+		map = mfdcr(DCRN_DMAS1);
+		map |= (connect_port_to_chan << dma_chan);	/* */
+		mtdcr(DCRN_DMAS1, map);
+		break;
+	case 1:
+		map = mfdcr(DCRN_DMAS2);
+		map |= (connect_port_to_chan << dma_chan);
+		mtdcr(DCRN_DMAS2, map);
+		break;
+
+	default:
+		printk("map_dma_port: bad channel: %d\n", dmanr);
+		return DMA_STATUS_BAD_CHANNEL;
+	}
+	return DMA_STATUS_GOOD;
+}
+
+int disable_dma_port(unsigned int dmanr, unsigned int ocp_dma,short dma_chan) {
+	unsigned int map;
+	int connect_port_to_chan, select;
+
+	connect_port_to_chan = ((ocp_dma & 0x7)*4);
+	select = ocp_dma >> 3;
+	switch (select) {
+	case 0:
+		map = mfdcr(DCRN_DMAS1);
+		map &= ~(connect_port_to_chan << dma_chan);	/* */
+		mtdcr(DCRN_DMAS1, map);
+		break;
+	case 1:
+		map = mfdcr(DCRN_DMAS2);
+		map &= ~(connect_port_to_chan << dma_chan);
+		mtdcr(DCRN_DMAS2, map);
+		break;
+	default:
+#ifdef DEBUG_4xxDMA
+		printk("disable_dma_port: bad channel: %d\n", dmanr);
+#endif
+		return DMA_STATUS_BAD_CHANNEL;
+	}
+	return DMA_STATUS_GOOD;
+}
+
+EXPORT_SYMBOL(disable_dma_port);
+EXPORT_SYMBOL(map_dma_port);
+EXPORT_SYMBOL(clr_dma_status);
