diff -Xxfiles -rNBwdu linux-2.6.12.orig/include/linux/i2c.h linux-2.6.12/include/linux/i2c.h
--- linux-2.6.12.orig/include/linux/i2c.h	2005-06-17 21:48:29.000000000 +0200
+++ linux-2.6.12/include/linux/i2c.h	2005-06-26 22:12:35.000000000 +0200
@@ -142,6 +142,7 @@
  * function is mainly used for lookup & other admin. functions.
  */
 struct i2c_client {
+	int id;
 	unsigned int flags;		/* div., see below		*/
 	unsigned int addr;		/* chip address - NOTE: 7bit 	*/
 					/* addresses are stored in the	*/
@@ -387,6 +388,7 @@
  	__u16 flags;
 #define I2C_M_TEN	0x10	/* we have a ten bit chip address	*/
 #define I2C_M_RD	0x01
+#define I2C_CLIENT_FAST	0x100
 #define I2C_M_NOSTART	0x4000
 #define I2C_M_REV_DIR_ADDR	0x2000
 #define I2C_M_IGNORE_NAK	0x1000
diff -Xxfiles -rNBwdu linux-2.6.12.orig/drivers/i2c/busses/i2c-ibm_iic.c linux-2.6.12/drivers/i2c/busses/i2c-ibm_iic.c
--- linux-2.6.12.orig/drivers/i2c/busses/i2c-ibm_iic.c	2005-06-17 21:48:29.000000000 +0200
+++ linux-2.6.12/drivers/i2c/busses/i2c-ibm_iic.c	2005-06-27 03:14:24.000000000 +0200
@@ -20,6 +20,10 @@
  *
  *   	With some changes from Kyösti Mälkki <kmalkki@cc.hut.fi>
  *	and even Frodo Looijaard <frodol@dds.nl>
+ *  and more changes by Uli.H
+ *  - more stable, (kernel-reboot was needed after bus hang)
+ *  - introduced "I2C_CLIENT_FAST" to switch 100/400 kHz on the fly
+ *  - bitbanging not possible with stb04500 hardware
  *
  * This program is free software; you can redistribute  it and/or modify it
  * under  the terms of  the GNU General  Public License as published by the
@@ -45,18 +49,40 @@

 #include "i2c-ibm_iic.h"

-#define DRIVER_VERSION "2.1"
+#define DRIVER_VERSION "3.1"

 MODULE_DESCRIPTION("IBM IIC driver v" DRIVER_VERSION);
 MODULE_LICENSE("GPL");

-static int iic_force_poll;
-module_param(iic_force_poll, bool, 0);
+static int iic_force_poll = 0;
+MODULE_PARM(iic_force_poll, "i");
 MODULE_PARM_DESC(iic_force_poll, "Force polling mode");

-static int iic_force_fast;
-module_param(iic_force_fast, bool, 0);
-MODULE_PARM_DESC(iic_fast_poll, "Force fast mode (400 kHz)");
+static int iic_force_fast = 0;
+MODULE_PARM(iic_force_fast, "i");
+MODULE_PARM_DESC(iic_force_fast, "Force fast mode (400 kHz)");
+
+#define ansi_n "\x1b[0m"
+
+#define ansi_red "\x1b[31m"
+#define ansi_grn "\x1b[32m"
+#define ansi_yel "\x1b[33m"
+#define ansi_blu "\x1b[34m"
+#define ansi_mgn "\x1b[35m"
+#define ansi_cya "\x1b[36m"
+#define ansi_wht "\x1b[37m"
+
+#define ansi_redlight "\x1b[1;31m"
+#define ansi_grnlight "\x1b[1;32m"
+#define ansi_yellight "\x1b[1;33m"
+#define ansi_blulight "\x1b[1;34m"
+#define ansi_mgnlight "\x1b[1;35m"
+#define ansi_cyalight "\x1b[1;36m"
+#define ansi_whtlight "\x1b[1;37m"
+
+//--------------------------------------------------------------------------
+#define EPRINTK( format, args... ) printk( ansi_redlight "\r[%s] " ansi_n "Error: " format, __FUNCTION__, ##args )
+

 #define DBG_LEVEL 0

@@ -81,360 +107,212 @@
 #if DBG_LEVEL > 2
 static void dump_iic_regs(const char* header, struct ibm_iic_private* dev)
 {
-	volatile struct iic_regs __iomem *iic = dev->vaddr;
+	volatile struct iic_regs *iic = dev->vaddr;
 	printk(KERN_DEBUG "ibm-iic%d: %s\n", dev->idx, header);
 	printk(KERN_DEBUG "  cntl     = 0x%02x, mdcntl = 0x%02x\n"
 	       KERN_DEBUG "  sts      = 0x%02x, extsts = 0x%02x\n"
 	       KERN_DEBUG "  clkdiv   = 0x%02x, xfrcnt = 0x%02x\n"
-	       KERN_DEBUG "  xtcntlss = 0x%02x, directcntl = 0x%02x\n",
+	       KERN_DEBUG "  xtcntlss = 0x%02x\n",
 		in_8(&iic->cntl), in_8(&iic->mdcntl), in_8(&iic->sts),
 		in_8(&iic->extsts), in_8(&iic->clkdiv), in_8(&iic->xfrcnt),
-		in_8(&iic->xtcntlss), in_8(&iic->directcntl));
+		in_8(&iic->xtcntlss));
 }
 #  define DUMP_REGS(h,dev)	dump_iic_regs((h),(dev))
 #else
 #  define DUMP_REGS(h,dev)	((void)0)
 #endif

-/* Bus timings (in ns) for bit-banging */
-static struct i2c_timings {
-	unsigned int hd_sta;
-	unsigned int su_sto;
-	unsigned int low;
-	unsigned int high;
-	unsigned int buf;
-} timings [] = {
-/* Standard mode (100 KHz) */
-{
-	.hd_sta	= 4000,
-	.su_sto	= 4000,
-	.low	= 4700,
-	.high	= 4000,
-	.buf	= 4700,
-},
-/* Fast mode (400 KHz) */
-{
-	.hd_sta = 600,
-	.su_sto	= 600,
-	.low 	= 1300,
-	.high 	= 600,
-	.buf	= 1300,
-}};
-
-/* Enable/disable interrupt generation */
-static inline void iic_interrupt_mode(struct ibm_iic_private* dev, int enable)
-{
-	out_8(&dev->vaddr->intmsk, enable ? INTRMSK_EIMTC : 0);
-}
-
-/*
- * Initialize IIC interface.
- */
-static void iic_dev_init(struct ibm_iic_private* dev)
-{
-	volatile struct iic_regs __iomem *iic = dev->vaddr;
-
-	DBG("%d: init\n", dev->idx);
-
-	/* Clear master address */
-	out_8(&iic->lmadr, 0);
-	out_8(&iic->hmadr, 0);
-
-	/* Clear slave address */
-	out_8(&iic->lsadr, 0);
-	out_8(&iic->hsadr, 0);
-
-	/* Clear status & extended status */
-	out_8(&iic->sts, STS_SCMP | STS_IRQA);
-	out_8(&iic->extsts, EXTSTS_IRQP | EXTSTS_IRQD | EXTSTS_LA
-			    | EXTSTS_ICT | EXTSTS_XFRA);
-
-	/* Set clock divider */
-	out_8(&iic->clkdiv, dev->clckdiv);

-	/* Clear transfer count */
-	out_8(&iic->xfrcnt, 0);
+//--------------------------------------------------------------------------
+#define SLEEP(ms) ( { current->state = TASK_INTERRUPTIBLE; \
+		schedule_timeout( (HZ * ms) / 1000 ); } )

-	/* Clear extended control and status */
-	out_8(&iic->xtcntlss, XTCNTLSS_SRC | XTCNTLSS_SRS | XTCNTLSS_SWC
-			    | XTCNTLSS_SWS);

-	/* Clear control register */
-	out_8(&iic->cntl, 0);
+//--------------------------------------------------------------------------
+//--------------------------------------------------------------------------
+static inline void iic_interrupt_mode(struct ibm_iic_private* dev, int enable);
+static void iic_abort_xfer(struct ibm_iic_private* dev);
+static int iic_wait_for_tc(struct ibm_iic_private* dev);
+static int iic_xfer_result(struct ibm_iic_private* dev);
+static int iic_xfer_bytes(struct ibm_iic_private* dev, struct i2c_msg* pm, int combined_xfer);
+static inline void iic_address(struct ibm_iic_private* dev, struct i2c_msg* msg);
+static int iic_xfer(struct i2c_adapter *adap, struct i2c_msg msgs[], signed int num);

-	/* Enable interrupts if possible */
-	iic_interrupt_mode(dev, dev->irq >= 0);

-	/* Set mode control */
-	out_8(&iic->mdcntl, MDCNTL_FMDB | MDCNTL_EINT | MDCNTL_EUBS
-			    | (dev->fast_mode ? MDCNTL_FSM : 0));

-	DUMP_REGS("iic_init", dev);
+//--------------------------------------------------------------------------
+//--------------------------------------------------------------------------
+// Enable/disable interrupt generation
+static inline void iic_interrupt_mode(struct ibm_iic_private* dev, int enable) {
+	out_8(&dev->vaddr->intmsk, enable ? INTRMSK_EIMTC : 0);
 }

-/*
- * Reset IIC interface
- */
-static void iic_dev_reset(struct ibm_iic_private* dev)
-{
-	volatile struct iic_regs __iomem *iic = dev->vaddr;
-	int i;
-	u8 dc;
-
-	DBG("%d: soft reset\n", dev->idx);
-	DUMP_REGS("reset", dev);
-
-    	/* Place chip in the reset state */
-	out_8(&iic->xtcntlss, XTCNTLSS_SRST);
-
-	/* Check if bus is free */
-	dc = in_8(&iic->directcntl);
-	if (!DIRCTNL_FREE(dc)){
-		DBG("%d: trying to regain bus control\n", dev->idx);
-
-		/* Try to set bus free state */
-		out_8(&iic->directcntl, DIRCNTL_SDAC | DIRCNTL_SCC);

-		/* Wait until we regain bus control */
-		for (i = 0; i < 100; ++i){
-			dc = in_8(&iic->directcntl);
-			if (DIRCTNL_FREE(dc))
-				break;
-
-			/* Toggle SCL line */
-			dc ^= DIRCNTL_SCC;
-			out_8(&iic->directcntl, dc);
-			udelay(10);
-			dc ^= DIRCNTL_SCC;
-			out_8(&iic->directcntl, dc);
-
-			/* be nice */
-			cond_resched();
-		}
-	}
+//--------------------------------------------------------------------------
+// Initialize IIC interface.
+static void iic_dev_init(struct ibm_iic_private* dev) {
+	volatile struct iic_regs *iic = dev->vaddr;

-	/* Remove reset */
-	out_8(&iic->xtcntlss, 0);
+	out_8(&iic->lmadr, 0);																	// Clear master address
+	out_8(&iic->hmadr, 0);

-	/* Reinitialize interface */
-	iic_dev_init(dev);
-}
+	out_8(&iic->lsadr, 0);																	// Clear slave address
+	out_8(&iic->hsadr, 0);

-/*
- * Do 0-length transaction using bit-banging through IIC_DIRECTCNTL register.
- */
+	out_8(&iic->sts, STS_SCMP | STS_IRQA);													// Clear status & extended status
+	out_8(&iic->extsts, EXTSTS_IRQP | EXTSTS_IRQD | EXTSTS_LA | EXTSTS_ICT | EXTSTS_XFRA);

-/* Wait for SCL and/or SDA to be high */
-static int iic_dc_wait(volatile struct iic_regs __iomem *iic, u8 mask)
-{
-	unsigned long x = jiffies + HZ / 28 + 2;
-	while ((in_8(&iic->directcntl) & mask) != mask){
-		if (unlikely(time_after(jiffies, x)))
-			return -1;
-		cond_resched();
-	}
-	return 0;
-}
+	out_8(&iic->clkdiv, dev->clckdiv);														// Set clock divider
+	out_8(&iic->xfrcnt, 0);																	// Clear transfer count
+	out_8(&iic->xtcntlss, XTCNTLSS_SRC | XTCNTLSS_SRS | XTCNTLSS_SWC | XTCNTLSS_SWS);		// Clear extended control and status
+	out_8(&iic->cntl, 0);																	// Clear control register
+	iic_interrupt_mode(dev, dev->irq >= 0);													// Enable interrupts if possible

-static int iic_smbus_quick(struct ibm_iic_private* dev, const struct i2c_msg* p)
-{
-	volatile struct iic_regs __iomem *iic = dev->vaddr;
-	const struct i2c_timings* t = &timings[dev->fast_mode ? 1 : 0];
-	u8 mask, v, sda;
-	int i, res;
+	/* Set mode control */
+	out_8(&iic->mdcntl, MDCNTL_FMDB | MDCNTL_EINT | MDCNTL_EUBS | (dev->fast_mode_enable ? MDCNTL_FSM : 0));

-	/* Only 7-bit addresses are supported */
-	if (unlikely(p->flags & I2C_M_TEN)){
-		DBG("%d: smbus_quick - 10 bit addresses are not supported\n",
-			dev->idx);
-		return -EINVAL;
 	}

-	DBG("%d: smbus_quick(0x%02x)\n", dev->idx, p->addr);
-
-	/* Reset IIC interface */
-	out_8(&iic->xtcntlss, XTCNTLSS_SRST);

-	/* Wait for bus to become free */
-	out_8(&iic->directcntl, DIRCNTL_SDAC | DIRCNTL_SCC);
-	if (unlikely(iic_dc_wait(iic, DIRCNTL_MSDA | DIRCNTL_MSC)))
-		goto err;
-	ndelay(t->buf);
-
-	/* START */
-	out_8(&iic->directcntl, DIRCNTL_SCC);
-	sda = 0;
-	ndelay(t->hd_sta);
-
-	/* Send address */
-	v = (u8)((p->addr << 1) | ((p->flags & I2C_M_RD) ? 1 : 0));
-	for (i = 0, mask = 0x80; i < 8; ++i, mask >>= 1){
-		out_8(&iic->directcntl, sda);
-		ndelay(t->low / 2);
-		sda = (v & mask) ? DIRCNTL_SDAC : 0;
-		out_8(&iic->directcntl, sda);
-		ndelay(t->low / 2);
+//--------------------------------------------------------------------------
+// Reset IIC interface
+static void iic_dev_reset(struct ibm_iic_private* dev) {
+	volatile struct iic_regs *iic = dev->vaddr;
+	unsigned int tmout;

-		out_8(&iic->directcntl, DIRCNTL_SCC | sda);
-		if (unlikely(iic_dc_wait(iic, DIRCNTL_MSC)))
-			goto err;
-		ndelay(t->high);
+	//printk( "\x1b[1;31m" "bus %d: soft reset\n" "\x1b[0m", dev->idx );
+	out_8(&iic->mdcntl, in_8(&iic->mdcntl) | 0x02 );										// EUBS (exit unknown bus state) (no effect if chip is not in this state)
+	out_8(&iic->xtcntlss, XTCNTLSS_SRST);													// Place chip in the reset state
+	tmout = jiffies+10;
+	while( tmout > jiffies ) in_8(&iic->xtcntlss);
+	out_8(&iic->xtcntlss, XTCNTLSS_SRC | XTCNTLSS_SRS | XTCNTLSS_SWC | XTCNTLSS_SWS);
+	iic_dev_init(dev);
 	}

-	/* ACK */
-	out_8(&iic->directcntl, sda);
-	ndelay(t->low / 2);
-	out_8(&iic->directcntl, DIRCNTL_SDAC);
-	ndelay(t->low / 2);
-	out_8(&iic->directcntl, DIRCNTL_SDAC | DIRCNTL_SCC);
-	if (unlikely(iic_dc_wait(iic, DIRCNTL_MSC)))
-		goto err;
-	res = (in_8(&iic->directcntl) & DIRCNTL_MSDA) ? -EREMOTEIO : 1;
-	ndelay(t->high);

-	/* STOP */
-	out_8(&iic->directcntl, 0);
-	ndelay(t->low);
-	out_8(&iic->directcntl, DIRCNTL_SCC);
-	if (unlikely(iic_dc_wait(iic, DIRCNTL_MSC)))
-		goto err;
-	ndelay(t->su_sto);
-	out_8(&iic->directcntl, DIRCNTL_SDAC | DIRCNTL_SCC);
-
-	ndelay(t->buf);
-
-	DBG("%d: smbus_quick -> %s\n", dev->idx, res ? "NACK" : "ACK");
-out:
-	/* Remove reset */
-	out_8(&iic->xtcntlss, 0);
-
-	/* Reinitialize interface */
-	iic_dev_init(dev);
-
-	return res;
-err:
-	DBG("%d: smbus_quick - bus is stuck\n", dev->idx);
-	res = -EREMOTEIO;
-	goto out;
-}

-/*
- * IIC interrupt handler
- */
-static irqreturn_t iic_handler(int irq, void *dev_id, struct pt_regs *regs)
-{
+//--------------------------------------------------------------------------
+// IIC interrupt handler
+//--------------------------------------------------------------------------
+static irqreturn_t iic_handler(int irq, void *dev_id, struct pt_regs *regs) {
 	struct ibm_iic_private* dev = (struct ibm_iic_private*)dev_id;
-	volatile struct iic_regs __iomem *iic = dev->vaddr;
+	volatile struct iic_regs* iic = dev->vaddr;

-	DBG2("%d: irq handler, STS = 0x%02x, EXTSTS = 0x%02x\n",
-	     dev->idx, in_8(&iic->sts), in_8(&iic->extsts));
+//	DBG2("%d: irq handler, STS = 0x%02x, EXTSTS = 0x%02x\n", dev->idx, in_8(&iic->sts), in_8(&iic->extsts));

-	/* Acknowledge IRQ and wakeup iic_wait_for_tc */
-	out_8(&iic->sts, STS_IRQA | STS_SCMP);
+	out_8(&iic->sts, STS_IRQA | STS_SCMP);									// Acknowledge IRQ and wakeup iic_wait_for_tc
 	wake_up_interruptible(&dev->wq);
-
-	return IRQ_HANDLED;
+	return(IRQ_HANDLED);
 }

-/*
- * Get master transfer result and clear errors if any.
- * Returns the number of actually transferred bytes or error (<0)
- */
-static int iic_xfer_result(struct ibm_iic_private* dev)
-{
-	volatile struct iic_regs __iomem *iic = dev->vaddr;
+
+//--------------------------------------------------------------------------
+// Get master transfer result and clear errors if any.
+// Returns the number of actually transferred bytes or error (<0)
+//--------------------------------------------------------------------------
+static int iic_xfer_result(struct ibm_iic_private* dev) {
+	volatile struct iic_regs *iic = dev->vaddr;

 	if (unlikely(in_8(&iic->sts) & STS_ERR)){
-		DBG("%d: xfer error, EXTSTS = 0x%02x\n", dev->idx,
-			in_8(&iic->extsts));
+		// we also come here if we try to address unknown device
+		// printk("%d: xfer error, EXTSTS = 0x%02x\n", dev->idx, in_8(&iic->extsts));

-		/* Clear errors and possible pending IRQs */
-		out_8(&iic->extsts, EXTSTS_IRQP | EXTSTS_IRQD |
-			EXTSTS_LA | EXTSTS_ICT | EXTSTS_XFRA);
+		// Clear errors and possible pending IRQs
+		out_8(&iic->extsts, EXTSTS_IRQP | EXTSTS_IRQD | EXTSTS_LA | EXTSTS_ICT | EXTSTS_XFRA);

-		/* Flush master data buffer */
+		// Flush master data buffer
 		out_8(&iic->mdcntl, in_8(&iic->mdcntl) | MDCNTL_FMDB);

-		/* Is bus free?
-		 * If error happened during combined xfer
-		 * IIC interface is usually stuck in some strange
-		 * state, the only way out - soft reset.
-		 */
+		// Is bus free?
+		// If error happened during combined xfer
+		// IIC interface is usually stuck in some strange
+		// state, the only way out - soft reset.
 		if ((in_8(&iic->extsts) & EXTSTS_BCS_MASK) != EXTSTS_BCS_FREE){
-			DBG("%d: bus is stuck, resetting\n", dev->idx);
+			printk("** bus %d is stuck, resetting **\n", dev->idx);
 			iic_dev_reset(dev);
 		}
-		return -EREMOTEIO;
+		return(-EREMOTEIO);
+	} else {
+		return(in_8(&iic->xfrcnt) & XFRCNT_MTC_MASK);
 	}
-	else
-		return in_8(&iic->xfrcnt) & XFRCNT_MTC_MASK;
 }

-/*
- * Try to abort active transfer.
- */
-static void iic_abort_xfer(struct ibm_iic_private* dev)
-{
-	volatile struct iic_regs __iomem *iic = dev->vaddr;
+//--------------------------------------------------------------------------
+// Try to abort active transfer.
+//--------------------------------------------------------------------------
+static void iic_abort_xfer(struct ibm_iic_private* dev) {
+	volatile struct iic_regs *iic = dev->vaddr;
 	unsigned long x;

-	DBG("%d: iic_abort_xfer\n", dev->idx);
-
 	out_8(&iic->cntl, CNTL_HMT);

-	/*
-	 * Wait for the abort command to complete.
-	 * It's not worth to be optimized, just poll (timeout >= 1 tick)
-	 */
+	// Wait for the abort command to complete.
+	// It's not worth to be optimized, just poll (timeout >= 1 tick)
 	x = jiffies + 2;
 	while ((in_8(&iic->extsts) & EXTSTS_BCS_MASK) != EXTSTS_BCS_FREE){
 		if (time_after(jiffies, x)){
-			DBG("%d: abort timeout, resetting...\n", dev->idx);
+			EPRINTK("abort timeout, resetting (index %d)\n", dev->idx);
 			iic_dev_reset(dev);
 			return;
 		}
 		schedule();
 	}
-
-	/* Just to clear errors */
-	iic_xfer_result(dev);
+	iic_xfer_result(dev);													// Just to clear errors
 }

-/*
- * Wait for master transfer to complete.
- * It puts current process to sleep until we get interrupt or timeout expires.
- * Returns the number of transferred bytes or error (<0)
- */
+
+//--------------------------------------------------------------------------
+// Wait for master transfer to complete.
+// It puts current process to sleep until we get interrupt or timeout expires.
+// Returns the number of transferred bytes or error (<0)
+//--------------------------------------------------------------------------
 static int iic_wait_for_tc(struct ibm_iic_private* dev){
+	unsigned long xc;
+	signed int ret = 0;
+	volatile struct iic_regs *iic = dev->vaddr;

-	volatile struct iic_regs __iomem *iic = dev->vaddr;
-	int ret = 0;
+	if( dev->irq >= 0 ) {													// Interrupt mode
+		wait_queue_t wait;
+		init_waitqueue_entry(&wait, current);

-	if (dev->irq >= 0){
-		/* Interrupt mode */
-		ret = wait_event_interruptible_timeout(dev->wq,
-			!(in_8(&iic->sts) & STS_PT), dev->adap.timeout * HZ);
+		add_wait_queue(&dev->wq, &wait);
+		set_current_state(TASK_INTERRUPTIBLE);

-		if (unlikely(ret < 0))
-			DBG("%d: wait interrupted\n", dev->idx);
-		else if (unlikely(in_8(&iic->sts) & STS_PT)){
-			DBG("%d: wait timeout\n", dev->idx);
-			ret = -ETIMEDOUT;
+		if( in_8(&iic->sts) & STS_PT ) {									// if transfer pending
+			schedule_timeout(dev->adap.timeout * HZ);
 		}
+		set_current_state(TASK_RUNNING);
+		remove_wait_queue(&dev->wq, &wait);
+
+		if( signal_pending(current) ) {
+			EPRINTK( "wait interrupted\n" );
+			ret = -ERESTARTSYS;
+
+		} else if( in_8(&iic->sts) & STS_PT ) {
+			EPRINTK( "wait timeout, sts: 0x%.2X, extsts: 0x%.2X\n", in_8(&iic->sts), in_8(&iic->extsts ) );
+//			printk( "Control     : 0x%.2X\n", in_8(&iic->cntl) );
+//			printk( "Mode Control: 0x%.2X\n", in_8(&iic->mdcntl) );
+//			printk( "LSA         : 0x%.2X\n", in_8(&iic->lsadr) );
+//			printk( "HSA         : 0x%.2X\n", in_8(&iic->hsadr) );
+//			printk( "CLKDIV      : 0x%.2X\n", in_8(&iic->clkdiv) );
+//			printk( "INTEN       : 0x%.2X\n", in_8(&iic->intmsk) );
+//			printk( "TCNT        : 0x%.2X\n", in_8(&iic->xfrcnt) );
+//			printk( "ECSS        : 0x%.2X\n", in_8(&iic->xtcntlss) );
+			ret = -ETIMEDOUT;
 	}
-	else {
-		/* Polling mode */
-		unsigned long x = jiffies + dev->adap.timeout * HZ;

-		while (in_8(&iic->sts) & STS_PT){
-			if (unlikely(time_after(jiffies, x))){
-				DBG("%d: poll timeout\n", dev->idx);
+	} else {																// Polling mode
+		xc = jiffies + dev->adap.timeout * HZ;
+
+		while( in_8(&iic->sts) & STS_PT ) {									// while transfer pending (PXFER)
+			if( time_after(jiffies, xc) ) {
+				EPRINTK( "poll timeout, idx %d\n", dev->idx );
 				ret = -ETIMEDOUT;
 				break;
 			}

-			if (unlikely(signal_pending(current))){
-				DBG("%d: poll interrupted\n", dev->idx);
+			if( signal_pending(current) ) {
+				EPRINTK( "poll interrupted, idx %d\n", dev->idx );
 				ret = -ERESTARTSYS;
 				break;
 			}
@@ -442,187 +320,144 @@
 		}
 	}

-	if (unlikely(ret < 0))
+	if( unlikely(ret < 0) ) {												// also called on ctrl-C for example
 		iic_abort_xfer(dev);
-	else
+	} else {
 		ret = iic_xfer_result(dev);
+	}

-	DBG2("%d: iic_wait_for_tc -> %d\n", dev->idx, ret);
-
-	return ret;
+	return(ret);
 }

-/*
- * Low level master transfer routine
- */
-static int iic_xfer_bytes(struct ibm_iic_private* dev, struct i2c_msg* pm,
-			  int combined_xfer)
-{
-	volatile struct iic_regs __iomem *iic = dev->vaddr;
+
+//--------------------------------------------------------------------------
+// Low level master transfer routine
+static int iic_xfer_bytes(struct ibm_iic_private* dev, struct i2c_msg* pm, int combined_xfer) {
+	volatile struct iic_regs *iic = dev->vaddr;
+	u8 cmd, cntl;
 	char* buf = pm->buf;
-	int i, j, loops, ret = 0;
-	int len = pm->len;
+	s32 i, j, loops, count, ret = 0;
+	s32 len = pm->len;

-	u8 cntl = (in_8(&iic->cntl) & CNTL_AMD) | CNTL_PT;
-	if (pm->flags & I2C_M_RD)
-		cntl |= CNTL_RW;

-	loops = (len + 3) / 4;
+	cntl = (in_8(&iic->cntl) & CNTL_AMD) | CNTL_PT;
+	if( pm->flags & I2C_M_RD ) cntl |= CNTL_RW;
+
+	loops = (len + 3) >> 2;													// use 4-byte transfer
 	for (i = 0; i < loops; ++i, len -= 4){
-		int count = len > 4 ? 4 : len;
-		u8 cmd = cntl | ((count - 1) << CNTL_TCT_SHIFT);
+		count = len > 4 ? 4 : len;
+		cmd = cntl | ((count - 1) << CNTL_TCT_SHIFT);

-		if (!(cntl & CNTL_RW))
-			for (j = 0; j < count; ++j)
-				out_8((void __iomem *)&iic->mdbuf, *buf++);
+		if( !(cntl & CNTL_RW) ) {											// if not a READ
+			for( j = 0; j < count; ++j ) {
+				out_8((volatile u8*)&iic->mdbuf, *buf++);
+			}
+		}

-		if (i < loops - 1)
+		if( i < loops - 1 ) {
 			cmd |= CNTL_CHT;
-		else if (combined_xfer)
+		} else if( combined_xfer ) {
 			cmd |= CNTL_RPST;
+		}
+		out_8(&iic->cntl, cmd);												// Start transfer

-		DBG2("%d: xfer_bytes, %d, CNTL = 0x%02x\n", dev->idx, count, cmd);
-
-		/* Start transfer */
-		out_8(&iic->cntl, cmd);
-
-		/* Wait for completion */
-		ret = iic_wait_for_tc(dev);
+		ret = iic_wait_for_tc(dev);											// Wait for completion

-		if (unlikely(ret < 0))
+		if( ret < 0 ) {
 			break;
-		else if (unlikely(ret != count)){
-			DBG("%d: xfer_bytes, requested %d, transfered %d\n",
-				dev->idx, count, ret);
-
-			/* If it's not a last part of xfer, abort it */
-			if (combined_xfer || (i < loops - 1))
-    				iic_abort_xfer(dev);
-
+		} else if( ret != count ) {
+			EPRINTK( "xfer_bytes, requested %d, transfered %d (index %d)\n", count, ret, dev->idx );
+			if( combined_xfer || (i < loops - 1) ) iic_abort_xfer(dev);		// If it's not a last part of xfer, abort it
 			ret = -EREMOTEIO;
 			break;
 		}

-		if (cntl & CNTL_RW)
-			for (j = 0; j < count; ++j)
-				*buf++ = in_8((void __iomem *)&iic->mdbuf);
+		if( cntl & CNTL_RW ) {
+			for( j = 0; j < count; ++j ) {
+				*buf++ = in_8((volatile u8*)&iic->mdbuf);
+			}
+		}
 	}

-	return ret > 0 ? 0 : ret;
+	return(ret > 0 ? 0 : ret);
 }

-/*
- * Set target slave address for master transfer
- */
-static inline void iic_address(struct ibm_iic_private* dev, struct i2c_msg* msg)
-{
-	volatile struct iic_regs __iomem *iic = dev->vaddr;
+
+//--------------------------------------------------------------------------
+// Set target slave address for master transfer
+static inline void iic_address(struct ibm_iic_private* dev, struct i2c_msg* msg) {
+	volatile struct iic_regs *iic = dev->vaddr;
 	u16 addr = msg->addr;

-	DBG2("%d: iic_address, 0x%03x (%d-bit)\n", dev->idx,
-		addr, msg->flags & I2C_M_TEN ? 10 : 7);
+	if( dev->fast_mode_enable ) {
+		out_8(&iic->mdcntl, (in_8(&iic->mdcntl) & 0xef) | ((msg->flags & I2C_CLIENT_FAST)? 0x10 : 0) );
+	}

-	if (msg->flags & I2C_M_TEN){
+	if( unlikely(msg->flags & I2C_M_TEN) ) {
 	    out_8(&iic->cntl, CNTL_AMD);
 	    out_8(&iic->lmadr, addr);
 	    out_8(&iic->hmadr, 0xf0 | ((addr >> 7) & 0x06));
-	}
-	else {
+	} else {
 	    out_8(&iic->cntl, 0);
 	    out_8(&iic->lmadr, addr << 1);
 	}
 }

-static inline int iic_invalid_address(const struct i2c_msg* p)
-{
+static inline int iic_invalid_address(const struct i2c_msg* p) {
 	return (p->addr > 0x3ff) || (!(p->flags & I2C_M_TEN) && (p->addr > 0x7f));
 }

-static inline int iic_address_neq(const struct i2c_msg* p1,
-				  const struct i2c_msg* p2)
-{
-	return (p1->addr != p2->addr)
-		|| ((p1->flags & I2C_M_TEN) != (p2->flags & I2C_M_TEN));
+static inline int iic_address_neq(const struct i2c_msg* p1, const struct i2c_msg* p2) {
+	return( (p1->addr != p2->addr) || ((p1->flags & I2C_M_TEN) != (p2->flags & I2C_M_TEN)) );
 }

-/*
- * Generic master transfer entrypoint.
- * Returns the number of processed messages or error (<0)
- */
-static int iic_xfer(struct i2c_adapter *adap, struct i2c_msg *msgs, int num)
-{
-    	struct ibm_iic_private* dev = (struct ibm_iic_private*)(i2c_get_adapdata(adap));
-	volatile struct iic_regs __iomem *iic = dev->vaddr;
-	int i, ret = 0;

-	DBG2("%d: iic_xfer, %d msg(s)\n", dev->idx, num);
+//--------------------------------------------------------------------------
+// Generic master transfer entrypoint.
+// Returns the number of processed messages or error (<0)
+static int iic_xfer(struct i2c_adapter *adap, struct i2c_msg msgs[], signed int num) {
+	struct ibm_iic_private* dev = (struct ibm_iic_private*)(i2c_get_adapdata(adap));
+	volatile struct iic_regs *iic = dev->vaddr;
+	signed int i, ret = 0;

-	if (!num)
-		return 0;
+	if( !num ) return(0);

-	/* Check the sanity of the passed messages.
-	 * Uhh, generic i2c layer is more suitable place for such code...
-	 */
-	if (unlikely(iic_invalid_address(&msgs[0]))){
-		DBG("%d: invalid address 0x%03x (%d-bit)\n", dev->idx,
-			msgs[0].addr, msgs[0].flags & I2C_M_TEN ? 10 : 7);
-		return -EINVAL;
-	}
+	// Check the sanity of the passed messages.
+	// Uhh, generic i2c layer is more suitable place for such code...
+	if( unlikely(iic_invalid_address(&msgs[0])) ) return(-EINVAL);
 	for (i = 0; i < num; ++i){
-		if (unlikely(msgs[i].len <= 0)){
-			if (num == 1 && !msgs[0].len){
-				/* Special case for I2C_SMBUS_QUICK emulation.
-				 * IBM IIC doesn't support 0-length transactions
-				 * so we have to emulate them using bit-banging.
-				 */
-				return iic_smbus_quick(dev, &msgs[0]);
-			}
-			DBG("%d: invalid len %d in msg[%d]\n", dev->idx,
-				msgs[i].len, i);
-			return -EINVAL;
-		}
-		if (unlikely(iic_address_neq(&msgs[0], &msgs[i]))){
-			DBG("%d: invalid addr in msg[%d]\n", dev->idx, i);
-			return -EINVAL;
-		}
+		if( unlikely(msgs[i].len <= 0) ) return(-EINVAL);
+		if( unlikely(iic_address_neq(&msgs[0], &msgs[i])) )	return(-EINVAL);
 	}

-	/* Check bus state */
-	if (unlikely((in_8(&iic->extsts) & EXTSTS_BCS_MASK) != EXTSTS_BCS_FREE)){
-		DBG("%d: iic_xfer, bus is not free\n", dev->idx);
+	if( unlikely((in_8(&iic->extsts) & EXTSTS_BCS_MASK) != EXTSTS_BCS_FREE) ) {		// Check bus state
+		printk( "%s, Bus %d is not free\n", __FUNCTION__, dev->idx );
+		// Usually it means something serious has happend.
+		// We *cannot* have unfinished previous transfer
+		// so it doesn't make any sense to try to stop it.
+		// Probably we were not able to recover from the
+		// previous error.
+		// The only *reasonable* thing I can think of here
+		// is soft reset.  --ebs

-		/* Usually it means something serious has happend.
-		 * We *cannot* have unfinished previous transfer
-		 * so it doesn't make any sense to try to stop it.
-		 * Probably we were not able to recover from the
-		 * previous error.
-		 * The only *reasonable* thing I can think of here
-		 * is soft reset.  --ebs
-		 */
 		iic_dev_reset(dev);
-
 		if ((in_8(&iic->extsts) & EXTSTS_BCS_MASK) != EXTSTS_BCS_FREE){
-			DBG("%d: iic_xfer, bus is still not free\n", dev->idx);
-			return -EREMOTEIO;
-		}
+			printk( "%s, Bus %d is still not free\n", __FUNCTION__, dev->idx );
+			return(-EREMOTEIO);
 	}
-	else {
-		/* Flush master data buffer (just in case) */
-		out_8(&iic->mdcntl, in_8(&iic->mdcntl) | MDCNTL_FMDB);
+	} else {
+		out_8(&iic->mdcntl, in_8(&iic->mdcntl) | MDCNTL_FMDB);						// Flush master data buffer (just in case)
 	}

-	/* Load slave address */
-	iic_address(dev, &msgs[0]);
-
-	/* Do real transfer */
-    	for (i = 0; i < num && !ret; ++i)
+	iic_address(dev, &msgs[0]);														// Load slave address
+	for( i = 0; i < num && !ret; ++i )												// Do real transfer
 		ret = iic_xfer_bytes(dev, &msgs[i], i < num - 1);

-	return ret < 0 ? ret : num;
+	return(ret < 0 ? ret : num);
 }

-static u32 iic_func(struct i2c_adapter *adap)
-{
+
+static u32 iic_func(struct i2c_adapter *adap) {
 	return I2C_FUNC_I2C | I2C_FUNC_SMBUS_EMUL | I2C_FUNC_10BIT_ADDR;
 }

@@ -630,54 +465,45 @@
 	.name 		= "IBM IIC algorithm",
 	.id   		= I2C_ALGO_OCP,
 	.master_xfer 	= iic_xfer,
+	.smbus_xfer	= NULL,
+	.slave_send	= NULL,
+	.slave_recv	= NULL,
+	.algo_control	= NULL,
 	.functionality	= iic_func
 };

-/*
- * Calculates IICx_CLCKDIV value for a specific OPB clock frequency
- */
-static inline u8 iic_clckdiv(unsigned int opb)
-{
-	/* Compatibility kludge, should go away after all cards
-	 * are fixed to fill correct value for opbfreq.
-	 * Previous driver version used hardcoded divider value 4,
-	 * it corresponds to OPB frequency from the range (40, 50] MHz
-	 */
-	if (!opb){
-		printk(KERN_WARNING "ibm-iic: using compatibility value for OPB freq,"
-			" fix your board specific setup\n");
+
+// Calculates IICx_CLCKDIV value for a specific OPB clock frequency
+static inline u8 iic_clckdiv(unsigned int opb) {
+	// Compatibility kludge, should go away after all cards
+	// are fixed to fill correct value for opbfreq.
+	// Previous driver version used hardcoded divider value 4,
+	// it corresponds to OPB frequency from the range (40, 50] MHz
+	if( (opb < 20000000) || (opb > 150000000) ) {
+		EPRINTK(KERN_WARNING "using compatibility value for OPB freq fix your board specific setup\n" );
 		opb = 50000000;
 	}

-	/* Convert to MHz */
-	opb /= 1000000;
-
-	if (opb < 20 || opb > 150){
-		printk(KERN_CRIT "ibm-iic: invalid OPB clock frequency %u MHz\n",
-			opb);
-		opb = opb < 20 ? 20 : 150;
-	}
+	opb /= 1000000;															// Convert to MHz
 	return (u8)((opb + 9) / 10 - 1);
 }

-/*
- * Register single IIC interface
- */
-static int __devinit iic_probe(struct ocp_device *ocp){

+//--------------------------------------------------------------------------
+// Register single IIC interface
+static int __devinit iic_probe(struct ocp_device *ocp) {
 	struct ibm_iic_private* dev;
 	struct i2c_adapter* adap;
 	struct ocp_func_iic_data* iic_data = ocp->def->additions;
 	int ret;
+	const bd_t * const bip = &__res;

 	if (!iic_data)
-		printk(KERN_WARNING"ibm-iic%d: missing additional data!\n",
-			ocp->def->index);
+		printk( KERN_WARNING "ibm-iic%d: missing additional data!\n", ocp->def->index );

 	if (!(dev = kmalloc(sizeof(*dev), GFP_KERNEL))){
-		printk(KERN_CRIT "ibm-iic%d: failed to allocate device data\n",
-			ocp->def->index);
-		return -ENOMEM;
+		printk( KERN_CRIT "ibm-iic%d: failed to allocate device data\n", ocp->def->index );
+		return(-ENOMEM);
 	}

 	memset(dev, 0, sizeof(*dev));
@@ -685,84 +511,66 @@
 	ocp_set_drvdata(ocp, dev);

 	if (!(dev->vaddr = ioremap(ocp->def->paddr, sizeof(struct iic_regs)))){
-		printk(KERN_CRIT "ibm-iic%d: failed to ioremap device registers\n",
-			dev->idx);
+		printk(KERN_CRIT "ibm-iic%d: failed to ioremap device registers\n", dev->idx);
 		ret = -ENXIO;
-		goto fail2;
-	}
-
+	} else {
 	init_waitqueue_head(&dev->wq);

 	dev->irq = iic_force_poll ? -1 : ocp->def->irq;
 	if (dev->irq >= 0){
-		/* Disable interrupts until we finish intialization,
-		   assumes level-sensitive IRQ setup...
-		 */
+			// Disable interrupts until we finish intialization,
+			// assumes level-sensitive IRQ setup...
 		iic_interrupt_mode(dev, 0);
 		if (request_irq(dev->irq, iic_handler, 0, "IBM IIC", dev)){
-			printk(KERN_ERR "ibm-iic%d: request_irq %d failed\n",
-				dev->idx, dev->irq);
-			/* Fallback to the polling mode */
-			dev->irq = -1;
+				printk(KERN_ERR "ibm-iic%d: request_irq %d failed\n", dev->idx, dev->irq);
+				dev->irq = -1;												// Fallback to the polling mode
 		}
 	}

 	if (dev->irq < 0)
-		printk(KERN_WARNING "ibm-iic%d: using polling mode\n",
-			dev->idx);
+			printk(KERN_WARNING "ibm-iic%d: using polling mode\n", dev->idx);

-	/* Board specific settings */
-	dev->fast_mode = iic_force_fast ? 1 : (iic_data ? iic_data->fast_mode : 0);
+		dev->fast_mode_enable = iic_force_fast ? 1 : bip->bi_iic_fast[dev->idx];	// Board specific settings

-	/* clckdiv is the same for *all* IIC interfaces,
-	 * but I'd rather make a copy than introduce another global. --ebs
-	 */
-	dev->clckdiv = iic_clckdiv(ocp_sys_info.opb_bus_freq);
+		// clckdiv is the same for *all* IIC interfaces,
+		// but I'd rather make a copy than introduce another global.
+		dev->clckdiv = iic_clckdiv(bip->bi_opb_busfreq);
 	DBG("%d: clckdiv = %d\n", dev->idx, dev->clckdiv);

-	/* Initialize IIC interface */
-	iic_dev_init(dev);
+		iic_dev_init(dev);													// Initialize IIC interface

-	/* Register it with i2c layer */
-	adap = &dev->adap;
+		adap = &dev->adap;													// Register it with i2c layer
 	strcpy(adap->name, "IBM IIC");
 	i2c_set_adapdata(adap, dev);
 	adap->id = I2C_HW_OCP | iic_algo.id;
 	adap->algo = &iic_algo;
 	adap->client_register = NULL;
 	adap->client_unregister = NULL;
-	adap->timeout = 1;
+		adap->timeout = 1;													// this is 1 Sec.
 	adap->retries = 1;

-	if ((ret = i2c_add_adapter(adap)) != 0){
-		printk(KERN_CRIT "ibm-iic%d: failed to register i2c adapter\n",
-			dev->idx);
-		goto fail;
+		if( !(ret = i2c_add_adapter(adap)) ) {
+			printk(KERN_INFO "ibm-iic%d: using %s mode\n", dev->idx, dev->fast_mode_enable? "fast (400 kHz)" : "standard (100 kHz)");
+			return(0);
 	}

-	printk(KERN_INFO "ibm-iic%d: using %s mode\n", dev->idx,
-		dev->fast_mode ? "fast (400 kHz)" : "standard (100 kHz)");
-
-	return 0;
-
-fail:
+		printk(KERN_CRIT "ibm-iic%d: failed to register i2c adapter\n", dev->idx);
 	if (dev->irq >= 0){
 		iic_interrupt_mode(dev, 0);
 		free_irq(dev->irq, dev);
 	}

-	iounmap(dev->vaddr);
-fail2:
-	ocp_set_drvdata(ocp, NULL);
+		iounmap((void*)dev->vaddr);
+	}
+	ocp_set_drvdata(ocp, 0);
 	kfree(dev);
-	return ret;
+	return(ret);
 }

-/*
- * Cleanup initialized IIC interface
- */
-static void __devexit iic_remove(struct ocp_device *ocp)
-{
+
+//--------------------------------------------------------------------------
+// Cleanup initialized IIC interface
+static void __devexit iic_remove(struct ocp_device *ocp) {
 	struct ibm_iic_private* dev = (struct ibm_iic_private*)ocp_get_drvdata(ocp);
 	BUG_ON(dev == NULL);
 	if (i2c_del_adapter(&dev->adap)){
@@ -779,21 +587,19 @@
 		    iic_interrupt_mode(dev, 0);
 		    free_irq(dev->irq, dev);
 		}
-		iounmap(dev->vaddr);
+		iounmap((void*)dev->vaddr);
 		kfree(dev);
 	}
 }

-static struct ocp_device_id ibm_iic_ids[] __devinitdata =
-{
+static struct ocp_device_id ibm_iic_ids[] __devinitdata = {
 	{ .vendor = OCP_VENDOR_IBM, .function = OCP_FUNC_IIC },
 	{ .vendor = OCP_VENDOR_INVALID }
 };

 MODULE_DEVICE_TABLE(ocp, ibm_iic_ids);

-static struct ocp_driver ibm_iic_driver =
-{
+static struct ocp_driver ibm_iic_driver = {
 	.name 		= "iic",
 	.id_table	= ibm_iic_ids,
 	.probe		= iic_probe,
@@ -804,16 +610,16 @@
 #endif
 };

-static int __init iic_init(void)
-{
+static int __init iic_init(void) {
 	printk(KERN_INFO "IBM IIC driver v" DRIVER_VERSION "\n");
 	return ocp_register_driver(&ibm_iic_driver);
 }

-static void __exit iic_exit(void)
-{
+static void __exit iic_exit(void) {
 	ocp_unregister_driver(&ibm_iic_driver);
 }

+//--------------------------------------------------------------------------
 module_init(iic_init);
 module_exit(iic_exit);
+
diff -Xxfiles -rNBwdu linux-2.6.12.orig/drivers/i2c/busses/i2c-ibm_iic.h linux-2.6.12/drivers/i2c/busses/i2c-ibm_iic.h
--- linux-2.6.12.orig/drivers/i2c/busses/i2c-ibm_iic.h	2005-06-17 21:48:29.000000000 +0200
+++ linux-2.6.12/drivers/i2c/busses/i2c-ibm_iic.h	2005-06-26 22:01:52.000000000 +0200
@@ -49,7 +49,7 @@
 	wait_queue_head_t wq;
 	int idx;
 	int irq;
-	int fast_mode;
+	int fast_mode_enable;
 	u8  clckdiv;
 };

diff -Xxfiles -rNBwdu linux-2.6.12.orig/drivers/i2c/i2c-core.c linux-2.6.12/drivers/i2c/i2c-core.c
--- linux-2.6.12.orig/drivers/i2c/i2c-core.c	2005-06-17 21:48:29.000000000 +0200
+++ linux-2.6.12/drivers/i2c/i2c-core.c	2005-06-27 03:04:16.000000000 +0200
@@ -614,7 +614,7 @@

 	if (client->adapter->algo->master_xfer) {
 		msg.addr   = client->addr;
-		msg.flags = client->flags & I2C_M_TEN;
+		msg.flags = client->flags & (I2C_M_TEN | I2C_CLIENT_FAST);
 		msg.len = count;
 		msg.buf = (char *)buf;

@@ -642,7 +642,7 @@
 	int ret;
 	if (client->adapter->algo->master_xfer) {
 		msg.addr   = client->addr;
-		msg.flags = client->flags & I2C_M_TEN;
+		msg.flags = client->flags & (I2C_M_TEN | I2C_CLIENT_FAST);
 		msg.flags |= I2C_M_RD;
 		msg.len = count;
 		msg.buf = buf;
